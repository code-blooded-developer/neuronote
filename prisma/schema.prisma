datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // null for OAuth users
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  documents    Document[]
  documentTags DocumentTag[]
  Chat         Chat[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Document {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  fileName    String
  description String?
  storagePath String
  mimeType    String
  size        Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
  status      DocumentStatus @default(uploading)

  isStarred Boolean   @default(false)
  deletedAt DateTime?

  tags         DocumentTag[]   @relation("DocumentTags")
  chunks       DocumentChunk[]
  chats ChatDocument[]

  @@unique([userId, storagePath])
  @@index([userId, createdAt])
}

model DocumentTag {
  id     String  @id @default(cuid())
  name   String
  color  String? // optional, for UI highlighting
  userId String
  user   User    @relation(fields: [userId], references: [id])

  documents Document[] @relation("DocumentTags")

  createdAt DateTime @default(now())

  @@unique([userId, name])
}

model DocumentChunk {
  id         String                @id @default(cuid())
  documentId String
  document   Document              @relation(fields: [documentId], references: [id])
  content    String // text chunk
  embedding  Unsupported("vector")
  createdAt  DateTime              @default(now())
}

enum DocumentStatus {
  uploading
  processing
  ready
  error
}

model Chat {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  title     String? // you can generate from first user query
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  documents ChatDocument[]
}

model ChatDocument {
  id         String   @id @default(cuid())
  chatId     String
  documentId String
  chat       Chat     @relation(fields: [chatId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([chatId, documentId]) // prevent duplicates
  @@index([chatId])
  @@index([documentId])
}

model Message {
  id     String @id @default(cuid())
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  role      MessageRole // "user" or "assistant"
  content   String
  createdAt DateTime    @default(now())
}

enum MessageRole {
  user
  assistant
}
